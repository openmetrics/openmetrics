# https://collectd.org/wiki/index.php/Table_of_Plugins
cp_load:
  name: System Load
  description: |
    The Load plugin collects the system load. These numbers give a rough overview over the utilization of a machine, though their meaning is mostly overrated.
    The system load is defined as the number of runnable tasks in the run-queue and is provided by many operating systems as a one, five or fifteen minute average.
  configuration: |
    LoadPlugin load
    # no further config needed

cp_swap:
  name: Swap
  description: |
    The Swap plugin collects the amount of memory currently written onto hard disk or whatever the system calls "swap".
  configuration: |
    LoadPlugin swap
    # no further config needed

cp_vmem:
  name: Vmem
  description: |
    The vmem plugin collects information about the virtual memory subsystem of the kernel. Per default, information such as page-faults, page-in and page-out to and from memory and swap, and the total number of pages are collected. When verbose statistics are enabled, all page actions (allocations, refills, steals, …) are collected per zone (DMA, DMA32, …).
  configuration: |
    LoadPlugin vmem
    <Plugin vmem>
      Verbose false
    </Plugin>

cp_apache:
  name: Apache
  description: |
    The Apache plugin queries the page generated by mod_status, the status module of the Apache web server, parses it and submits the number of bytes transfered, the number of requests received, and the number of processes in the various states of the scoreboard. The output of the status module of lighttpd is understood, too.
    The plugin uses libcurl to connect to the web server, optionally using a configured username/password to authenticate. It tries to keep a keep-alive connection open to minimize the overhead of connecting to the server. It's also possible to query hosts over SSL.

    Details of the configuration can be found in the collectd.conf(5) manual page.
  configuration: |
    LoadPlugin "apache"
    <Plugin "apache">
      <Instance "apache80">
        URL "http://localhost:80/server-status?auto"
        Server "apache"
      </Instance>
    </Plugin>

cp_nginx:
  name: Nginx
  description: |
    The nginx plugin connects to nginx (pronounced “engine x”), an HTTP and mail (reverse) proxy server. It collects the number of requests handled by the nginx daemon since startup and the number of current connections by connection state (reading, writing, ...).
  configuration: |
    <Plugin "nginx">
      URL "http://127.0.0.1:8000/nginx_status?auto"
    </Plugin>

cp_net_1:
  name: Network Interfaces w/o loopback
  description: |
    The Interface plugin collects information about the traffic (octets per second), packets per second and errors of interfaces (of course number of errors during one second). If you're not interested in all interfaces but want to exclude some, or only collect information of some selected interfaces, you can select the “interesting” interfaces using the plugin's configuration.
  configuration: |
    LoadPlugin interface
    <Plugin interface>
      # all interfaces except of loopback
      Interface "lo"
      IgnoreSelected true
    </Plugin>

cp_cpu:
  name: CPU Usage
  description: |
    The CPU plugin collects the amount of time spent by the CPU in various states, most notably executing user code, executing system code, waiting for IO-operations and being idle.
    This since has been an FAQ: The CPU plugin does not collect percentages. It collects “jiffies”, the units of scheduling. On many Linux systems there are circa 100 jiffies in one second, but this does not mean you will end up with a percentage. Depending on system load, hardware, whether or not the system is virtualized and possibly half a dozen other factors there may be more or less than 100 jiffies in one second. There is absolutely no guarantee that all states add up to 100, an absolute must for percentages.
  configuration: |
    LoadPlugin cpu
    # no further config needed

cp_df:
  name: Disk Free & Inode Usage
  description: |
    The DF plugin collects file system usage information, i. e. basically how much space on a mounted partition is used and how much is available. It's named after and very similar to the df(1) UNIX command that's been around forever.
    However, not all "partitions" are of interest. For example /proc and /dev usually don't get filled and their "size" doesn't make a lot of sense. That's why the DF plugin offers to select only specific devices, mount points or filesystem types.
  configuration: |
    LoadPlugin df
    <Plugin df>
      # data of any partition that is not of type tmpfs, proc etc.
      FSType "tmpfs"
      FSType "sysfs"
      FSType "usbfs"
      FSType "devpts"
      FSType "proc"
      IgnoreSelected true
      ReportByDevice false
      ReportReserved true
      ReportInodes true
    </Plugin>

cp_disk:
  name: Disk I/O
  description: |
    The Disk plugin collects performance statistics of hard-disks and, where supported, partitions. While the “octets” and “operations” are quite straight forward, the other two datasets need a little explanation:
    “merged” are the number of operations, that could be merged into other, already queued operations, i. e. one physical disk access served two or more logical operations. Of course, the higher that number, the better.
    “time” is the average time an I/O-operation took to complete. Since this is a little messy to calculate take the actual values with a grain of salt.
  configuration: |
    LoadPlugin disk

cp_memory:
  name: Memory
  description: |
    The Memory plugin collects physical memory utilization.
    The values are reported by their use by the operating system. Under Linux, the categories are:
    Used
    Buffered
    Cached
    Free
    Free memory is memory you paid for, that's using power and that doesn't do anything useful. It is normal that the operating system puts that memory to use, for example by caching files it has accessed (reported as Cached under Linux).
    Virtual memory statistics can be collected with the vmem plugin under Linux.
  configuration: |
    LoadPlugin memory
    # no further config needed
